<?php

/**
 * PluginfzTagTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginfzTagTable extends Doctrine_Table
{

    protected $taggableModelsLoaded = false;

    /**
     * Returns an instance of this class.
     *
     * @return object PluginfzTagTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('PluginfzTag');
    }

    /**
     * Method that returns weight ordered query
     * @param integer $limit
     * @return Doctrine_Query
     * @author Grzegorz Śliwiński
     */
    public function getTagsForCloudQuery( $limit = null)
    {
        $query = $this->createQuery('t')->where('t.count > 0')->orderBy('t.count DESC');
        if( $limit )
        {
            $query->limit($limit);
        }
        return $query;
    }

    /**
     * Method returns all possible counts values for getTagsWeightOrderedQuery method
     * @param integer $limit
     * @return Doctrine_Query
     * @author grzegorz Śliwiński
     */
    public function getWeightsForCloudQuery( $limit = null )
    {
        return $this->getTagsForCloudQuery($limit)->select('t.count, COUNT(t.id) num')->groupBy('t.count');
    }

    /**
     * Method that returns array of tags (tagName => tagName) for autocomplete.
     * @return array
     * @author Grzegorz Śliwiński
     */
    public function getTagsForAutocomplete()
    {
        return $this->createQuery('t')->select('t.name as name')
                ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
    }

    /**
     * Method executes query on tags with given ids to increase their weight
     * @param array $tagIds
     */
    public function increaseTagsWeight(Array $tagIds)
    {

        if( count( $tagIds ) > 0 )
        {
            $this->createQuery('t')->update()
                    ->set('t.count', 't.count + 1')
                    ->whereIn('t.id', $tagIds)->execute();
        }
    }

    /**
     * Method executes query on tags with given ids to decrease their weight
     * @param array $tagIds
     */
    public function decreaseTagsWeight(Array $tagIds)
    {
        if( count( $tagIds ) > 0 )
        {
            $this->createQuery('t')->update()
                    ->set('t.count', 't.count - 1')
                    ->whereIn('t.id', $tagIds)
                    ->andWhere('t.count > 0')->execute();
        }
    }
}